---
#include <string.h>

#if defined(__BYTE_ORDER) && __BYTE_ORDER == __BIG_ENDIAN || \
    defined(__BIG_ENDIAN__) || \
    defined(__ARMEB__) || \
    defined(__THUMBEB__) || \
    defined(__AARCH64EB__) || \
    defined(_MIBSEB) || defined(__MIBSEB) || defined(__MIBSEB__)
// It's a big-endian target architecture
#elif defined(__BYTE_ORDER) && __BYTE_ORDER == __LITTLE_ENDIAN || \
    defined(__LITTLE_ENDIAN__) || \
    defined(__ARMEL__) || \
    defined(__THUMBEL__) || \
    defined(__AARCH64EL__) || \
    defined(_MIPSEL) || defined(__MIPSEL) || defined(__MIPSEL__)
// It's a little-endian target architecture
#define NEED_TO_SWAP_BYTES
#else
#error "I don't know what architecture this is!"
#endif

#define IS_BIG_ENDIAN (!*(unsigned char *)&(unsigned short){1})

#ifdef NEED_TO_SWAP_BYTES
long long swap_int64(unsigned long long val ) {
    val = ((val << 8) & 0xFF00FF00FF00FF00ULL ) | ((val >> 8) & 0x00FF00FF00FF00FFULL );
    val = ((val << 16) & 0xFFFF0000FFFF0000ULL ) | ((val >> 16) & 0x0000FFFF0000FFFFULL );
    return (val << 32) | ((val >> 32) & 0xFFFFFFFFULL);
}
int swap_int16(unsigned short val) {
    return (val>>8) | (val<<8);
}

int swap_int32(unsigned int val) {
    return ((val>>24)&0xff) | // move byte 3 to byte 0
                    ((val<<8)&0xff0000) | // move byte 1 to byte 2
                    ((val>>8)&0xff00) | // move byte 2 to byte 1
                    ((val<<24)&0xff000000); // byte 0 to byte 3
}

void swap_int16_array(short *array, int arraySize){
    for (int i=0; i<arraySize; i++){
        array[i] = swap_int16(array[i]);
    }
}

void swap_int32_array(int *array, int arraySize){
    for (int i=0; i<arraySize; i++){
        array[i] = swap_int32(array[i]);
    }
}

void swap_int64_array(long long*array, int arraySize){
    for (int i=0; i<arraySize; i++){
        array[i] = swap_int64(array[i]);
    }
}

#endif

void internal_copy_bytes(void*src, void*dest, int sizeInBytes){
    memcpy(dest, src, sizeInBytes);
}

void internal_swap_short(void*shortArray, int size){
#ifdef NEED_TO_SWAP_BYTES
    swap_int16_array(shortArray, size);
#endif
}

void internal_swap_int(void*intArray, int size){
#ifdef NEED_TO_SWAP_BYTES
    swap_int32_array(intArray, size);
#endif
}

void internal_swap_long(void*longArray, int size){
#ifdef NEED_TO_SWAP_BYTES
    swap_int64_array(longArray, size);
#endif
}