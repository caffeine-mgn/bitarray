---
long long swap_int64( long long val )
{
    val = ((val << 8) & 0xFF00FF00FF00FF00ULL ) | ((val >> 8) & 0x00FF00FF00FF00FFULL );
    val = ((val << 16) & 0xFFFF0000FFFF0000ULL ) | ((val >> 16) & 0x0000FFFF0000FFFFULL );
    return (val << 32) | ((val >> 32) & 0xFFFFFFFFULL);
}

#define IS_BIG_ENDIAN (!*(unsigned char *)&(unsigned short){1})
#include <string.h>
void swap_int64_array(long long*array, int arraySize){
    for (int i=0; i<arraySize; i++){
        array[i] = swap_int64(array[i]);
    }
}

void internal_byteArrayToLongArray(void*byteArray,void*longArray,int sizeInBytes){
    memcpy(longArray, byteArray, sizeInBytes);

#if defined(__BYTE_ORDER) && __BYTE_ORDER == __BIG_ENDIAN || \
    defined(__BIG_ENDIAN__) || \
    defined(__ARMEB__) || \
    defined(__THUMBEB__) || \
    defined(__AARCH64EB__) || \
    defined(_MIBSEB) || defined(__MIBSEB) || defined(__MIBSEB__)
// It's a big-endian target architecture
#elif defined(__BYTE_ORDER) && __BYTE_ORDER == __LITTLE_ENDIAN || \
    defined(__LITTLE_ENDIAN__) || \
    defined(__ARMEL__) || \
    defined(__THUMBEL__) || \
    defined(__AARCH64EL__) || \
    defined(_MIPSEL) || defined(__MIPSEL) || defined(__MIPSEL__)
// It's a little-endian target architecture
swap_int64_array(longArray, sizeInBytes/8);
#else
#error "I don't know what architecture this is!"
#endif


//    if (!IS_BIG_ENDIAN){
//        swap_int64_array(longArray, sizeInBytes/8);
//    }
}